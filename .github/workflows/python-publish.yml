name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # üßπ Full cleanup before build
      - name: Clean previous builds
        run: rm -rf build/ dist/ *.egg-info

      # üî• Set version from GitHub tag
      - name: Set version from GitHub release tag
        run: |
          version=${GITHUB_REF_NAME#v}  # Strip leading "v" if present
          echo "Setting photorch version to $version in setup.py"
          sed -i -E "s/version *= *['\"]([0-9]+\.[0-9]+\.[0-9]+)['\"](,?)/version='$version'\2/" setup.py

      # üì¶ Build distributions
      - name: Build release distributions
        run: |
          python -m pip install --upgrade build
          python -m build

      # üèπ Upload artifacts for later use
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs: release-build
    permissions:
      id-token: write
    environment:
      name: pypi

    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      # üßπ Clean any leftover build junk again
      - name: Full clean before upload
        run: rm -rf build/ *.egg-info

      # ‚ùå Check for old versions in dist/
      - name: Fail if dist/ contains wrong versions
        run: |
          echo "Checking dist/ for unexpected files..."
          ls -lh dist/
          version=${GITHUB_REF_NAME#v}
          if ls dist/ | grep -v "photorch-$version" | grep '.whl'; then
            echo "‚ùå ERROR: Found old versions in dist/. Only photorch-$version should exist."
            exit 1
          fi

      # üöÄ Upload ONLY the tagged version
      - name: Publish release distribution to PyPI
        run: |
          python -m pip install --upgrade twine
          version=${GITHUB_REF_NAME#v}
          echo "Uploading photorch-$version to PyPI..."
          twine upload --non-interactive --skip-existing "dist/photorch-$version"*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
